!Testing inserting a slab of plasma in the chamber
!Trying && operators instead of if for the profile



node_conf {
  !node_number(1:2) =  2, 2,           ! Use 2 x 2 parallel nodes
  !n_threads = 2,                      ! Use 2 threads per node
  if_periodic(1:2) = .true., .false.,
}

grid { 
  nx_p(1:2) = 256, 256,               ! Use a 256 x 256 grid
}

time_step {
  dt     =   0.07,                    ! \Delta t = 0.07
  ndump  =  2,                        ! Global diagnostic frequency set to 2
}

space {
  xmin(1:2) =   -12.8 , -12.8,        ! Simulation box will range from -12.8 to 12.8 in x
  xmax(1:2) =    12.8 ,  12.8,        ! in both dimensions
}

time {
  tmax  = 50.0,                       ! Run simulation up to t = 50
}


el_mag_fld {
  ext_fld = "static",
  type_ext_b = "uniform",
  ext_b0(1:3) = 0.0, 0.0, 5.0,
}

emf_bound { !will be ignored due to node_conf settings
  type(1:2,1) =    "conducting",   "conducting",
  type(1:2,2) =    "conducting",   "conducting",
}


diag_emf {
  ndump_fac = 10,                     ! diagnostics at every 10 * 2 = 20 timesteps
  reports = "ext_b1", "ext_b2", "ext_b3", "part_b1", "part_b2", "part_b3",       ! save all magnetic field components seen by the particles
}


particles {
  num_species = 1,                    ! Use 1 particle species
}


species {
  name = "electrons" ,                ! Name used for diagnostics
  num_par_x(1:2) = 8, 8,              ! 8 x 8 particles per cell
  rqm=-1.0,                           ! m/q = -1 (electrons)

  init_type = "profile",              ! Setting up slab of electrons
}



udist {
  uth(1:3) =  0.1 , 0.0 , 0.0 ,       ! Initial thermal velocity
  ufl(1:3) =  3.0 , 0.0 , 0.0 ,       ! Initial fluid velocity 
}


profile {
  profile_type(1) = "math func",

  math_func_expr = "((x2 > (-3.0)) && (x2 < 3.0 + 0.2*sin(3.14/12.8*x1)))",


  density = 1.0,               ! Global multiplier for density
  den_min = 0.0,               ! No electrons under this value of density
}


spe_bound { !will be ignored due to node_conf settings
    type(1:2,1) =    "open",    "open",
    type(1:2,2) = "open", "open",
}

diag_species {
  ndump_fac = 10,                     ! Dump data every 10 * 2 cycles
  reports = "charge",                 ! Report charge density data
}

current{}

diag_current {
  ndump_fac = 10,                       ! diagnostics at every 10 * 5 = 50 timesteps
  reports = "j1", "j2", "j3",           ! save all components of current density
}
